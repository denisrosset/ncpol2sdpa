{"name":"Ncpol2sdpa","tagline":"A converter from noncommutative polynomial optimization problems to sparse SDPA input format ","body":"Ncpol2sdpa\r\n==\r\nNcpol2sdpa is a set of scripts to convert a polynomial optimization problem of either commutative or noncommutative variables to a sparse semidefinite programming (SDP) problem that can be processed by the [SDPA](http://sdpa.sourceforge.net/) family of solvers. The optimization problem can be unconstrained or constrained by equalities and inequalities.\r\n\r\nThe objective is to be able to solve very large scale optimization problems. For example, a convergent series of lower bounds can be obtained for ground state problems with arbitrary Hamiltonians.\r\n\r\nThe implementation has an intuitive syntax for entering Hamiltonians and it scales for a larger number of noncommutative variables using a sparse representation of the SDP problem. \r\n\r\nDependencies\r\n==\r\nThe code requires [SymPy](http://sympy.org/)=0.7.2 and [SciPy](http://scipy.org/)=0.13 in the Python search path. The code is compatible with Python 3, but using it incurs a major decrease in performance. Note that since SciPy is now a dependency, Pypy is no longer supported.\r\n\r\nUsage\r\n==\r\nThe following code replicates the toy example from Pironio, S.; Navascues, M. & Acin, A. Convergent relaxations of polynomial optimization problems with noncommuting variables SIAM Journal on Optimization, SIAM, 2010, 20, 2157-2180.\r\n\r\n    from ncpol2sdpa import generate_variables, SdpRelaxation\r\n\r\n    # Number of Hermitian variables\r\n    n_vars = 2\r\n    # Order of relaxation\r\n    order = 2\r\n\r\n    # Get Hermitian variables\r\n    X = generate_variables(n_vars, hermitian=True)\r\n\r\n    # Define the objective function\r\n    obj = X[0] * X[1] + X[1] * X[0]\r\n\r\n    # Inequality constraints\r\n    inequalities = [-X[1] ** 2 + X[1] + 0.5]\r\n\r\n    # Equality constraints\r\n    equalities = []\r\n\r\n    # Simple monomial substitutions\r\n    monomial_substitution = {}\r\n    monomial_substitution[X[0] ** 2] = X[0]\r\n\r\n    # Obtain SDP relaxation\r\n    sdpRelaxation = SdpRelaxation(X)\r\n    sdpRelaxation.get_relaxation(obj, inequalities, equalities,\r\n                                 monomial_substitution, order)\r\n    sdpRelaxation.write_to_sdpa('examplenc.dat-s')\r\n\r\nFurther examples are under the examples folder.\r\n\r\n\r\nInstallation\r\n==\r\nThe code is available on PyPI, hence it can be installed by \r\n\r\n    $ sudo pip install ncpol2sdpa\r\n\r\nIf you want the latest git version, follow the standard procedure for installing Python modules:\r\n\r\n    $ sudo python setup.py install\r\n\r\nAcknowledgment\r\n==\r\nThis work is supported by the European Commission Seventh Framework Programme under Grant Agreement Number FP7-601138 [PERICLES](http://pericles-project.eu/), by the [Red Española de Supercomputación](http://www.bsc.es/RES) grants number FI-2013-1-0008 and  FI-2013-3-0004, and by the [Swedish National Infrastructure for Computing](http://www.snic.se/) project number SNIC 2014/2-7.\r\n\r\nMore Information\r\n==\r\nFor more information refer to the following manuscript:\r\n\r\n[http://arxiv.org/abs/1308.6029](http://arxiv.org/abs/1308.6029)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}